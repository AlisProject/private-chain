AWSTemplateFormatVersion: 2010-09-09
#Transform: AWS::Serverless-2016-10-31

Parameters:
  ParityNodesAMI:
    Type: 'String'

Resources:
  PrivateChain:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.1.0.0/24
      Tags:
        - Key: Name
          Value: PrivateChain
        - Key: Component
          Value: PrivateChain
  PrivateChainVpcLink:
    Type: "AWS::ApiGateway::VpcLink"
    Properties:
      Description: VPC link for Private chain.
      Name: PrivateChainVpcLink
      TargetArns:
        - !Ref NLB
  NLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: NLB
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet
      Type: network
      Tags:
        - Key: Name
          Value: NLB
        - Key: Component
          Value: PrivateChain
#  API:
#    Type: 'AWS::Serverless::Api'
#    Properties:
#      StageName: production
#      DefinitionBody:
#        swagger: "2.0"
#        info:
#          title: !Ref "AWS::StackName"
#          version: 1.0.0
#        basePath: /
#        schemes:
#          - https
#        definitions:
#          CreateAccount:
#            type: object
#        paths:
#          /accounts/new:
#            post:
#              description: '新規アカウント作成'
#              responses:
#                '200':
#                  description: '新規作成されたアカウントのアドレス'
#                  schema:
#                    type: object
#                    properties:
#                      address:
#                        type: 'string'
  PrivateSubNet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateChain
      CidrBlock: 10.1.0.0/28
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: PrivateSubNet1
        - Key: Component
          Value: PrivateChain
  PrivateSubNet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateChain
      CidrBlock: 10.1.0.16/28
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: PrivateSubNet2
        - Key: Component
          Value: PrivateChain
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PrivateChain
      GroupName: ELBSecurityGroup
      GroupDescription: Security Group for ELB.
      Tags:
        - Key: Name
          Value: ELBSecurityGroup
        - Key: Component
          Value: PrivateChain
  ELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: ELB
      Scheme: internal
      Subnets:
        - !Ref PrivateSubNet1
        - !Ref PrivateSubNet2
      Listeners:
        - LoadBalancerPort: '8545'
          InstancePort: '8545'
          Protocol: HTTP
          InstanceProtocol: HTTP
      Instances:
        - !Ref PCParityPoA1a
        - !Ref PCParityPoA2a
        - !Ref PCParityPoA1c
        - !Ref PCParityPoA2c
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Tags:
        - Key: Name
          Value: ELB
        - Key: Component
          Value: PrivateChain
  RoleToELB:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ELBFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  GetBalance:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.6
      Code:
        ZipFile: ./tmp.zip
      Handler: handler.lambda_handler
      Role: !GetAtt RoleToELB.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref PrivateSecurityGroup
        SubnetIds:
          - !Ref PrivateSubNet1
          - !Ref PrivateSubNet2
      Tags:
        - Key: Name
          Value: GetBalance
        - Key: Component
          Value: PrivateChain
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PrivateChain
      GroupName: PrivateSecurityGroup
      GroupDescription: Security Group for Private chain.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '30300'
          ToPort: '30300'
          CidrIp: 10.1.0.0/24
          Description: 'For enodes.'
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
          Description: 'For RPC.'
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          SourceSecurityGroupId: !Ref PublicSecurityGroup
          Description: 'For RPC.'
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          CidrIp: 10.1.0.0/24
          Description: 'For RPC.'
      Tags:
        - Key: Name
          Value: PrivateSecurityGroup
        - Key: Component
          Value: PrivateChain
  PCParityPoA1a:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: m4.large
      SubnetId: !Ref PrivateSubNet1
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: PCParityPoA1a
        - Key: Component
          Value: PrivateChain
  PCParityPoA2a:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: m4.large
      SubnetId: !Ref PrivateSubNet1
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: PCParityPoA2a
        - Key: Component
          Value: PrivateChain
  PCParityPoA1c:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: m4.large
      SubnetId: !Ref PrivateSubNet2
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: PCParityPoA1c
        - Key: Component
          Value: PrivateChain
  PCParityPoA2c:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: m4.large
      SubnetId: !Ref PrivateSubNet2
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: PCParityPoA2c
        - Key: Component
          Value: PrivateChain
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateChain
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.1.0.32/28
      Tags:
        - Key: Name
          Value: PublicSubnet
        - Key: Component
          Value: PrivateChain
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway
        - Key: Component
          Value: PrivateChain
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref PrivateChain
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-bec974d8
      InstanceType: t2.medium
      SubnetId: !Ref PublicSubnet
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion
        - Key: Component
          Value: PrivateChain
  EIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: eipalloc-4e2c3274
      InstanceId: !Ref Bastion
  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PrivateChain
      GroupName: PublicSecurityGroup
      GroupDescription: Security Group for public subnet. Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicSecurityGroup
        - Key: Component
          Value: PrivateChain
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref PrivateChain
      Tags:
        - Key: Name
          Value: PublicRouteTable
        - Key: Component
          Value: PrivateChain
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: eipalloc-0e273934
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: NatGateway
        - Key: Component
          Value: PrivateChain
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref PrivateChain
      Tags:
        - Key: Name
          Value: PrivateRouteTable
        - Key: Component
          Value: PrivateChain
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubNet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubNet2
      RouteTableId: !Ref PrivateRouteTable
