AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  ParityNodesAMI:
    Type: 'AWS::SSM::Parameter::Value<String>'
  BastionAllocationId:
    Type: 'AWS::SSM::Parameter::Value<String>'
  NatAllocationId:
    Type: 'AWS::SSM::Parameter::Value<String>'
  EC2DeleteOnTermination:
    Type: 'AWS::SSM::Parameter::Value<String>'
  AccountsNewRequestPassword:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainMainSigner:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainAlisTokenAddress:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ParityNodesInstanceType:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ParityNodesVolumeSize:
    Type: 'AWS::SSM::Parameter::Value<String>'

Resources:
  PrivateChain:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.1.0.0/24
      Tags:
        - Key: Name
          Value: PrivateChain
        - Key: Component
          Value: PrivateChain
  PrivateChainVpcLink:
    Type: "AWS::ApiGateway::VpcLink"
    Properties:
      Description: VPC link for Private chain.
      Name: PrivateChainVpcLink
      TargetArns:
        - !Ref NLB
  PrivateChainVPCFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt
        - LogRole
        - Arn
      LogGroupName: PrivateChainVPCFlowLog
      ResourceId: !Ref PrivateChain
      ResourceType: VPC
      TrafficType: ALL
  NLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Ref AWS::StackName
      Scheme: internal
      Subnets:
        - !Ref PrivateSubNet1
        - !Ref PrivateSubNet2
      Type: network
      Tags:
        - Key: Name
          Value: NLB
        - Key: Component
          Value: PrivateChain
  NlbTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Ref AWS::StackName
      Port: 8545
      Protocol: TCP
      Tags:
        - Key: NlbTargetGroup
          Value: NLB
        - Key: Component
          Value: PrivateChain
      Targets:
        - Id: !Ref PCParityPoA1a
          Port: 8545
        - Id: !Ref PCParityPoA1c
          Port: 8545
        - Id: !Ref PCParityPoA2a
          Port: 8545
        - Id: !Ref PCParityPoA2c
          Port: 8545
      TargetType: instance
      VpcId: !Ref PrivateChain
  NlbListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NlbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref NLB
      Port: 8545
      Protocol: TCP
  # 本来はこのRoleは不要でPolicyのみ作成したいが不可能なのでRoleごと作る
  PrivateChainInternalAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "PrivateChainInternalAPIPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - execute-api:Invoke
              Resource:
                - 'arn:aws:execute-api:ap-northeast-1:*'
                # FIXME: リソース生成後に指定
                # - arn:aws:execute-api:ap-northeast-1:090169530579:ohie9qzzjj/*/POST/accounts/new
  API:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: production
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref "AWS::StackName"
          version: 1.0.0
        basePath: /
        schemes:
          - https
        definitions:
          CreateAccount:
            type: object
        paths:
          /accounts/new:
            post:
              description: '新規アカウント作成'
              responses:
                '200':
                  description: '新規作成されたアカウントのアドレス'
                  schema:
                    type: object
                    properties:
                      address:
                        type: 'string'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: 'http://example.com:8545' # VPC Linkの場合は使用しないが定義する必要のある項目
                httpMethod: POST
                type: http
                connectionId: !Ref PrivateChainVpcLink
                connectionType: VPC_LINK
                requestTemplates:
                  application/json:
                    !Sub
                      - |-
                        {
                          "jsonrpc": "2.0",
                          "method": "personal_newAccount",
                          "params": [
                            "${AccountsNewRequestPassword}"
                          ],
                          "id": 1
                        }
                      - {
                          AccountsNewRequestPassword: !Ref AccountsNewRequestPassword
                        }
          /wallet/balance:
            post:
              description: 'ウォレットの残高を取得'
              responses:
                '200':
                  description: 'ウォレットの残高'
                  schema:
                    type: object
                    properties:
                      private_eth_address:
                        type: 'string'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: 'http://example.com:8545' # VPC Linkの場合は使用しないが定義する必要のある項目
                httpMethod: POST
                type: http
                connectionId: !Ref PrivateChainVpcLink
                connectionType: VPC_LINK
                requestTemplates:
                  application/json:
                    !Sub
                      - |-
                        {
                          "jsonrpc": "2.0",
                          "method": "eth_call",
                          "params": [
                            {
                              "from": "${PrivateChainMainSigner}",
                              "to": "${PrivateChainAlisTokenAddress}",
                              "data": "0x70a08231000000000000000000000000$input.json('private_eth_address').replaceAll('\"','')"
                            },
                            "latest"
                          ],
                          "id": 1
                        }
                      - {
                          PrivateChainMainSigner: !Ref PrivateChainMainSigner,
                          PrivateChainAlisTokenAddress: !Ref PrivateChainAlisTokenAddress
                        }
          /wallet/tip:
            post:
              description: '投げ銭を行う'
              responses:
                '200':
                  description: '投げ銭リクエスト受付結果'
                  schema:
                    type: object
                    properties:
                      from_user_eth_address:
                        type: 'string'
                      to_user_eth_address:
                        type: 'string'
                      tip_value:
                        type: 'integer'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: 'http://example.com:8545' # VPC Linkの場合は使用しないが定義する必要のある項目
                httpMethod: POST
                type: http
                connectionId: !Ref PrivateChainVpcLink
                connectionType: VPC_LINK
                requestTemplates:
                  application/json:
                    !Sub
                      - |-
                        {
                          "jsonrpc": "2.0",
                          "method": "personal_sendTransaction",
                          "params": [
                            {
                              "from": "$input.json('from_user_eth_address').replaceAll('\"','')",
                              "to": "${PrivateChainAlisTokenAddress}",
                              "value": "0x0",
                              "data": "0xa9059cbb000000000000000000000000$input.json('to_user_eth_address').replaceAll('\"','')$input.json('tip_value').replaceAll('\"','')"
                            },
                            "${AccountsNewRequestPassword}"
                          ],
                          "id": 1
                        }
                      - {
                          AccountsNewRequestPassword: !Ref AccountsNewRequestPassword,
                          PrivateChainAlisTokenAddress: !Ref PrivateChainAlisTokenAddress
                        }
  PrivateSubNet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateChain
      CidrBlock: 10.1.0.0/28
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: PrivateSubNet1
        - Key: Component
          Value: PrivateChain
  PrivateSubNet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateChain
      CidrBlock: 10.1.0.16/28
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: PrivateSubNet2
        - Key: Component
          Value: PrivateChain
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PrivateChain
      GroupName: PrivateSecurityGroup
      GroupDescription: Security Group for Private chain.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.1.0.0/24
          Description: 'For SSH.'
        - IpProtocol: tcp
          FromPort: '30303'
          ToPort: '30303'
          CidrIp: 10.1.0.0/24
          Description: 'For enodes.'
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          SourceSecurityGroupId: !Ref PublicSecurityGroup
          Description: 'For RPC from Bastion.'
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          CidrIp: 10.1.0.0/24
          Description: 'For health check.'
      Tags:
        - Key: Name
          Value: PrivateSecurityGroup
        - Key: Component
          Value: PrivateChain
  PCParityPoA1a:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: !Ref ParityNodesInstanceType
      SubnetId: !Ref PrivateSubNet1
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: !Ref EC2DeleteOnTermination
            VolumeSize: !Ref ParityNodesVolumeSize
          NoDevice: {}
      Tags:
        - Key: Name
          Value: PCParityPoA1a
        - Key: Component
          Value: PrivateChain
        - Key: Backup
          Value: yes
  PCParityPoA2a:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: !Ref ParityNodesInstanceType
      SubnetId: !Ref PrivateSubNet1
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: !Ref EC2DeleteOnTermination
            VolumeSize: !Ref ParityNodesVolumeSize
          NoDevice: {}
      Tags:
        - Key: Name
          Value: PCParityPoA2a
        - Key: Component
          Value: PrivateChain
        - Key: Backup
          Value: yes
  PCParityPoA1c:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: !Ref ParityNodesInstanceType
      SubnetId: !Ref PrivateSubNet2
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: !Ref EC2DeleteOnTermination
            VolumeSize: !Ref ParityNodesVolumeSize
          NoDevice: {}
      Tags:
        - Key: Name
          Value: PCParityPoA1c
        - Key: Component
          Value: PrivateChain
        - Key: Backup
          Value: yes
  PCParityPoA2c:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ParityNodesAMI
      InstanceType: !Ref ParityNodesInstanceType
      SubnetId: !Ref PrivateSubNet2
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: !Ref EC2DeleteOnTermination
            VolumeSize: !Ref ParityNodesVolumeSize
          NoDevice: {}
      Tags:
        - Key: Name
          Value: PCParityPoA2c
        - Key: Component
          Value: PrivateChain
        - Key: Backup
          Value: yes
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateChain
      AvailabilityZone: ap-northeast-1d
      CidrBlock: 10.1.0.32/28
      Tags:
        - Key: Name
          Value: PublicSubnet
        - Key: Component
          Value: PrivateChain
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway
        - Key: Component
          Value: PrivateChain
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref PrivateChain
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-bec974d8
      InstanceType: t2.medium
      SubnetId: !Ref PublicSubnet
      KeyName: private-chain
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: !Ref EC2DeleteOnTermination
            VolumeSize: !Ref ParityNodesVolumeSize
          NoDevice: {}
      Tags:
        - Key: Name
          Value: Bastion
        - Key: Component
          Value: PrivateChain
        - Key: Backup
          Value: yes
  BastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !Ref BastionAllocationId
      InstanceId: !Ref Bastion
  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PrivateChain
      GroupName: PublicSecurityGroup
      GroupDescription: Security Group for public subnet. Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicSecurityGroup
        - Key: Component
          Value: PrivateChain
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref PrivateChain
      Tags:
        - Key: Name
          Value: PublicRouteTable
        - Key: Component
          Value: PrivateChain
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !Ref NatAllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: NatGateway
        - Key: Component
          Value: PrivateChain
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref PrivateChain
      Tags:
        - Key: Name
          Value: PrivateRouteTable
        - Key: Component
          Value: PrivateChain
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubNet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubNet2
      RouteTableId: !Ref PrivateRouteTable
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - vpc-flow-logs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:Create*
            - logs:PutLogEvents
            - s3:GetObject
            Resource:
            - arn:aws:logs:*:*:*
            - arn:aws:s3:::*
  LogRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: LogRole
