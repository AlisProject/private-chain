---
- name: Init
  file: src=/usr/bin/python3 dest=/usr/bin/python owner=root group=root state=link

- name: Install jq
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - jq

- name: Get Parity install script
  command: curl https://get.parity.io -kL -o /tmp/parity.sh

- file: path=/tmp/parity.sh mode=0755

- stat: path=/usr/bin/parity
  register: parity

- name: Install Parity
  shell: /tmp/parity.sh
  when: not parity.stat.exists

- name: Create dirctries
  file: path={{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - "{{ parity_dir }}"
    - "{{ parity_dir }}/keys"
    - "{{ parity_dir }}/keys/PrivateChain"

- name: Deliver configuration files for Parity private chain
  template: src={{ item.src }} dest={{ parity_dir }}/{{ item.dest }} backup=yes
  with_items:
    - { src: 'spec.json.j2', dest: 'spec.json' }
    - { src: 'node.toml.j2', dest: 'node.toml' }
    - { src: 'node.pwds.j2', dest: 'node.pwds' }

- name: Deliver ETH account key files
  template: src={{ item.src }} dest={{ parity_dir }}//keys/PrivateChain/{{ item.dest }} backup=yes mode=600
  with_items:
    - { src: 'PCParityPoA1a_key.j2', dest: 'PCParityPoA1a' }
    - { src: 'PCParityPoA2a_key.j2', dest: 'PCParityPoA2a' }
    - { src: 'PCParityPoA2c_key.j2', dest: 'PCParityPoA2c' }
    - { src: 'PCParityPoA1c_key.j2', dest: 'PCParityPoA1c' }

- name: Import parity account
  command: "parity account import {{ parity_dir }}/keys/PrivateChain/{{ ansible_host }}"

- command: "parity account list"
  register: validator_address

- name: Add validator
  lineinfile: >-
    dest='{{ parity_dir }}/node.toml'
    state=present
    backrefs=yes
    regexp='^engine_signer.*'
    line='engine_signer = "{{ validator_address.stdout }}"'
